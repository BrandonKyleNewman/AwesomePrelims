parser = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "Start": parse_Start,
        "Set": parse_Set,
        "Elements": parse_Elements,
        "ElementList": parse_ElementList,
        "Elt": parse_Elt,
        "Element": parse_Element,
        "Tuple": parse_Tuple,
        "T_integer": parse_T_integer,
        "T_string": parse_T_string,
        "T_space": parse_T_space
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "Start";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_Start() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_Elt();
        if (result0 !== null) {
          result0 = (function(offset, e) { return e; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Set() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 123) {
          result0 = "{";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Elements();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 125) {
              result2 = "}";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"}\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, e) { return new Set(e, true); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Elements() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_ElementList();
        if (result0 !== null) {
          result0 = (function(offset, el) { return el; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = [];
          result1 = parse_T_space();
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_T_space();
          }
          if (result0 !== null) {
            result0 = (function(offset) { return []; })(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_ElementList() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Elt();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 44) {
            result1 = ",";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\",\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_ElementList();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, e, el) { el.unshift(e); return el; })(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_Elt();
          if (result0 !== null) {
            result0 = (function(offset, e) { out = []; out.push(e); return out; })(pos0, result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_Elt() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_T_space();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_T_space();
        }
        if (result0 !== null) {
          result1 = parse_Element();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_T_space();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_T_space();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, e) { return e; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Element() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_Set();
        if (result0 !== null) {
          result0 = (function(offset, s) { return s; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_Tuple();
          if (result0 !== null) {
            result0 = (function(offset, t) { return t; })(pos0, result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            result0 = parse_T_integer();
            if (result0 !== null) {
              result0 = (function(offset, i) { return i; })(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              result0 = parse_T_string();
              if (result0 !== null) {
                result0 = (function(offset, s) { return s; })(pos0, result0);
              }
              if (result0 === null) {
                pos = pos0;
              }
            }
          }
        }
        return result0;
      }
      
      function parse_Tuple() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 40) {
          result0 = "(";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Elements();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 41) {
              result2 = ")";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\")\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, e) { return new Tuple(e); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_T_integer() {
        var result0, result1;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        if (/^[0-9]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, digits) { return parseInt(digits.join(""),10); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("integer");
        }
        return result0;
      }
      
      function parse_T_string() {
        var result0, result1;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        if (/^[a-z]/i.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[a-z]i");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[a-z]/i.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[a-z]i");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, chars) { return chars.join(""); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("string");
        }
        return result0;
      }
      
      function parse_T_space() {
        var result0;
        
        reportFailures++;
        if (/^[' '\t\r\n]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[' '\\t\\r\\n]");
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("whitespace");
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();


test( "sets", 51, function() {

	equal( (new Set(["x","y","z"])).laTeXformat(), "\\{x,y,z\\}",
		'Set(["x","y","z"]).laTeXformatAsSet()' );

	equal( (new Set(["x","y"])).isSameSetAs(new Set(["y","x"])), true,
		'Set(["x","y"]).isSameSetAs(["y","x"])' );

	equal( (new Set(["x","y"])).isSameSetAs(new Set(["y"])), false,
		'Set(["x","y"]).isSameSetAs(["y"])' );

	equal( (new Set(["y"])).isSameSetAs(new Set(["x","y"])), false,
		'Set(["y"]).isSameSetAs(["x","y"])' );

	equal( (new Tuple(["x","y"])).isSameTupleAs(new Tuple(["x","y"])), true,
		'Tuple(["x","y"]).isSameTupleAs(Tuple(["x","y"])' );

	equal( (new Tuple(["x","y"])).isSameTupleAs(new Tuple(["y"])), false,
		'Tuple(["x","y"]).isSameTupleAs(Tuple(["y"])' );

	equal( (new Tuple(["x","y"])).isSameTupleAs(new Tuple(["y","x"])), false,
		'Tuple(["x","y"]).isSameTupleAs(Tuple(["y","x"])' );

	equal( (new Set(["y"])).hasSubset(new Set(["x","y"])), false,
		'Set(["y"]).hasSubset(Set(["x","y"]))' );

	equal( (new Set(["x","y"])).hasSubset(new Set(["x"])), true,
		'Set(["x","y"]).hasSubsetOf(Set(["x"]))' );

	equal( (new Set(["x","y"])).hasSubset(new Set([])), true,
		'Set(["x","y"]).hassSubsetOf(Set([]))' );

	equal( (new Set([])).hasSubset(new Set(["x"])), false,
		'Set([]).hasSubsetOf(Set(["x"]))' );

	equal( (new Set(["x"])).hasSubset(new Set(["x"])), true,
		'Set(["x"]).hasSubset(Set(["x"]))' );
	
    equal( (new Set(["x"])).hasProperSubset(new Set(["x"])), false,
		'Set(["x"]).hasProperSubset(Set(["x"]))' );

	equal( (new Set(["x","y"])).hasProperSubset(new Set(["x"])), true,
		'Set(["x","y"]).hasProperSubset(Set(["x"]))' );

	equal( (new Set(["y"])).hasElement("y"), true,
		'Set(["y"].hasElement("y")' );

	equal( (new Set(["x","y"])).hasElement("x"), true,
		'Set(["x","y"].hasElement("x")' );

	equal( (new Set(["x","y"])).hasElement("y"), true,
		'Set(["x","y"].hasElement("y")' );

	equal( (new Set(["x","y"])).hasElement("z"), false,
		'Set(["x","y"].hasElement("z")' );

	equal( (new Set(["x","y"])).hasElement(new Set([])), false,
		'Set(["x","y"].hasElement(Set([]))' );

	equal( (new Set([new Set([]),"y"])).hasElement(new Set([])), true,
		'Set([Set([]),"y"].hasElement(Set([]))' );

	equal( isEquivalentTo(new Set([]),new Set([])), true,
		'isEquivalentTo(Set([]),Set([]))' );

	equal( isEquivalentTo(new Set(["abc","a"]), new Set(["abc","a"])), true,
		'isEquivalentTo(Set(["abc","a"]),Set(["abc","a"]))' );

	equal( isEquivalentTo(new Set(["abc","a"]), new Set(["a","abc"])), true,
		'isEquivalentTo(Set(["abc","a"]),Set(["a","abc"]))' );

	equal( isEquivalentTo(new Set([]),new Tuple([])), false,
		'isEquivalentTo(Set([]),Tuple([]))' );

	equal( isEquivalentTo(new Tuple([]),new Tuple([])), true,
		'isEquivalentTo(Tuple([]),Tuple([]))' );

	equal( isEquivalentTo(new Tuple(["abc","a"]), new Tuple(["abc","a"])), true,
		'isEquivalentTo(Tuple(["abc","a"]),Tuple(["abc","a"]))' );

	equal( isEquivalentTo(new Tuple(["abc","a"]), new Tuple(["a","abc"])), false,
		'isEquivalentTo(Tuple(["abc","a"]),Tuple(["a","abc"]))' );

	equal( isEquivalentTo("x",new Set([])), false,
		'isEquivalentTo("x",Set([]))' );

	equal( isEquivalentTo("x","x"), true,
		'isEquivalentTo("x","x")' );

	equal( isEquivalentTo("x","xy"), false,
		'isEquivalentTo("x","xy")' );

	equal( isEquivalentTo("x","z"), false,
		'isEquivalentTo("x","z")' );

	equal( isEquivalentTo("y",new Set(["x","y"])), false,
		'isEquivalentTo("y",Set(["x","y"]))' );

	equal( isEquivalentTo("y",9), false,
		'isEquivalentTo("y",9)' );

	equal( isEquivalentTo(9.5,9.5), true,
		'isEquivalentTo(9.5,9.5)' );

	equal( isEquivalentTo(9,true), false,
		'isEquivalentTo(9,true)' );

	equal( isEquivalentTo(false,true), false,
		'isEquivalentTo(false,true)' );

	equal( isEquivalentTo(false,false), true,
		'isEquivalentTo(false,false)' );


	// Start test cases directly related to parsing

	equal( isEquivalentTo(parser.parse("{}"),new Set([])), true,
		'isEquivalentTo(parser.parse("{}"),Set([]))');

	equal( isEquivalentTo(parser.parse("()"),new Tuple([])), true,
		'isEquivalentTo(parser.parse("()"),makeTuple([])');

	equal( isEquivalentTo(parser.parse(" {} "),new Set([])), true,
		'isEquivalentTo(parser.parse(" {} "),Set([]))');

	equal( isEquivalentTo(parser.parse(" {  }   "),new Set([])), true,
		'isEquivalentTo(parser.parse(" {  }   "),Set([]))');

	equal( isEquivalentTo(parser.parse("{{}}"),new Set([new Set([])])), true,
		'isEquivalentTo(parser.parse("{{}}"),Set([Set([])]))');

	equal( isEquivalentTo(parser.parse("{()}"),new Set([new Tuple([])])), true,
		'isEquivalentTo(parser.parse("{{}}"),Set([Tuple([])])');

	equal( isEquivalentTo(parser.parse("{{}}"),new Set([])), false,
		'isEquivalentTo(parser.parse("{{}}"),Set([]))');

	equal( isEquivalentTo(parser.parse("{abc}"),new Set(["abc"])), true,
		'isEquivalentTo(parser.parse("{abc}"),Set(["abc"]))');

	equal( isEquivalentTo(parser.parse("(abc)"),new Tuple(["abc"])),true,
		'isEquivalentTo(parser.parse("(abc)"),Tuple(["abc"])');

	equal( isEquivalentTo(parser.parse("{abc,     a }"),new Set(["abc","a"])), true,
		'isEquivalentTo(parser.parse("{abc,      a }"),Set(["abc","a"]))');

	equal( isEquivalentTo(parser.parse("{abc,     a }"),new Set(["a","abc"])), true,
		'isEquivalentTo(parser.parse("{abc,      a }"),Set(["a","abc"]))');

	equal( isEquivalentTo(parser.parse("{abc,{abc}}"),new Set(["abc",new Set(["abc"])])), true,
		'isEquivalentTo(parser.parse("{abc,{abc}}"),Set(["abc,Set(["abc"])]))');

	equal( isEquivalentTo(parser.parse("(a,b)"),new Tuple(["a","b"])), true,
		'isEquivalentTo(parser.parse("(a,b)"),Tuple(["a","b"]))');

	equal( isEquivalentTo(parser.parse("  (   { abc,9   ,(def,1)}, 2)"),
					new Tuple([ new Set([new Tuple(["def",1]),"abc",9]),2])), true,
		'isEquivalentTo(parser.parse("  (   { abc,9   ,(def,1)}, 2)"),Tuple([Set[Tuple(["def",1]),"abc",9]),2]))');

/* these throw errors in the parser, rather than returning null
	equal( parser.parse("[]"),null,
		'parser.parse("[]")');

	equal( parser.parse("{a,[c]}"),null,
		'parser.parse("{a,[c]}")');

	equal( parser.parse("{a},bc}"),null,
		'parser.parse("{a},bc}")');

	equal( parser.parse("{a),bc}"),null,
		'parser.parse("{a),bc}")');

	equal( parser.parse("{a,(bc}"),null,
		'parser.parse("{a,(bc}")');

	equal( parser.parse("{a},bc,{}"),null,
		'parser.parse("{a},bc,{}")');

	equal( parser.parse(""),null,
		'parser.parse("")');
*/

});

